$NetBSD: patch-ae,v 1.13 2011/04/19 10:28:31 wiz Exp $

Fix build with png-1.5.
https://bugzilla.gnome.org/show_bug.cgi?id=640409

--- plug-ins/common/file-mng.c.orig	2010-07-02 22:51:56.000000000 +0000
+++ plug-ins/common/file-mng.c
@@ -799,6 +799,13 @@ mng_save_image (const gchar  *filename,
       png_infop       png_info_ptr;
       FILE           *infile, *outfile;
       int             num_passes;
+      int             color_type;
+      png_colorp      palette;
+      int             num_palette;
+      int             bit_depth;
+      png_bytep       trans_alpha;
+      int             num_trans;
+      png_color_16p   trans_color;
       int             tile_height;
       guchar        **layer_pixels, *layer_pixel;
       int             pass, j, k, begin, end, num;
@@ -969,7 +976,7 @@ mng_save_image (const gchar  *filename,
           goto err3;
         }
 
-      if (setjmp (png_ptr->jmpbuf) != 0)
+      if (setjmp (png_jmpbuf(png_ptr)) != 0)
         {
           g_warning ("HRM saving PNG in mng_save_image()");
           png_destroy_write_struct (&png_ptr, &png_info_ptr);
@@ -981,37 +988,31 @@ mng_save_image (const gchar  *filename,
       png_init_io (png_ptr, outfile);
       png_set_compression_level (png_ptr, mng_data.compression_level);
 
-      png_info_ptr->width = layer_cols;
-      png_info_ptr->height = layer_rows;
-      png_info_ptr->interlace_type = (mng_data.interlaced == 0 ? 0 : 1);
-      png_info_ptr->bit_depth = 8;
-
+      bit_depth = 8;
       switch (layer_drawable_type)
         {
         case GIMP_RGB_IMAGE:
-          png_info_ptr->color_type = PNG_COLOR_TYPE_RGB;
+          color_type = PNG_COLOR_TYPE_RGB;
           break;
         case GIMP_RGBA_IMAGE:
-          png_info_ptr->color_type = PNG_COLOR_TYPE_RGB_ALPHA;
+          color_type = PNG_COLOR_TYPE_RGB_ALPHA;
           break;
         case GIMP_GRAY_IMAGE:
-          png_info_ptr->color_type = PNG_COLOR_TYPE_GRAY;
+          color_type = PNG_COLOR_TYPE_GRAY;
           break;
         case GIMP_GRAYA_IMAGE:
-          png_info_ptr->color_type = PNG_COLOR_TYPE_GRAY_ALPHA;
+          color_type = PNG_COLOR_TYPE_GRAY_ALPHA;
           break;
         case GIMP_INDEXED_IMAGE:
-          png_info_ptr->color_type = PNG_COLOR_TYPE_PALETTE;
-          png_info_ptr->valid |= PNG_INFO_PLTE;
-          png_info_ptr->palette =
-            (png_colorp) gimp_image_get_colormap (image_id, &num_colors);
-          png_info_ptr->num_palette = num_colors;
-          break;
         case GIMP_INDEXEDA_IMAGE:
-          png_info_ptr->color_type = PNG_COLOR_TYPE_PALETTE;
-          layer_has_unique_palette =
-            respin_cmap (png_ptr, png_info_ptr, layer_remap,
-                         image_id, layer_drawable);
+          color_type = PNG_COLOR_TYPE_PALETTE;
+          gimp_image_get_colormap (image_id, &num_colors);
+          if (num_palette <= 2)
+            bit_depth = 1;
+          else if (num_palette <= 4)
+            bit_depth = 2;
+          else if (num_palette <= 16)
+            bit_depth = 4;
           break;
         default:
           g_warning ("This can't be!\n");
@@ -1021,16 +1022,14 @@ mng_save_image (const gchar  *filename,
           goto err3;
         }
 
-      if ((png_info_ptr->valid & PNG_INFO_PLTE) == PNG_INFO_PLTE)
-        {
-          if (png_info_ptr->num_palette <= 2)
-            png_info_ptr->bit_depth = 1;
-          else if (png_info_ptr->num_palette <= 4)
-            png_info_ptr->bit_depth = 2;
-          else if (png_info_ptr->num_palette <= 16)
-            png_info_ptr->bit_depth = 4;
-        }
+      png_set_IHDR(png_ptr, png_info_ptr, layer_cols, layer_rows, bit_depth, color_type, (mng_data.interlaced == 0 ? PNG_INTERLACE_NONE : PNG_INTERLACE_ADAM7), PNG_COMPRESSION_TYPE_DEFAULT, PNG_FILTER_TYPE_DEFAULT);
 
+      if (layer_drawable_type == GIMP_INDEXED_IMAGE)
+        png_set_PLTE(png_ptr, png_info_ptr, (png_colorp) gimp_image_get_colormap (image_id, &num_colors), num_colors);
+      else if (layer_drawable_type == GIMP_INDEXEDA_IMAGE)
+        layer_has_unique_palette =
+          respin_cmap (png_ptr, png_info_ptr, layer_remap,
+                       image_id, layer_drawable);
       png_write_info (png_ptr, png_info_ptr);
 
       if (mng_data.interlaced != 0)
@@ -1038,8 +1037,8 @@ mng_save_image (const gchar  *filename,
       else
         num_passes = 1;
 
-      if ((png_info_ptr->color_type == PNG_COLOR_TYPE_PALETTE) &&
-          (png_info_ptr->bit_depth < 8))
+      if ((png_get_color_type(png_ptr, png_info_ptr) == PNG_COLOR_TYPE_PALETTE) &&
+          (png_get_bit_depth(png_ptr, png_info_ptr) < 8))
         png_set_packing (png_ptr);
 
       tile_height = gimp_tile_height ();
@@ -1065,7 +1064,7 @@ mng_save_image (const gchar  *filename,
               gimp_pixel_rgn_get_rect (&layer_pixel_rgn, layer_pixel, 0,
                                        begin, layer_cols, num);
 
-              if ((png_info_ptr->valid & PNG_INFO_tRNS) == PNG_INFO_tRNS)
+              if (png_get_tRNS(png_ptr, png_info_ptr, &trans_alpha, &num_trans, &trans_color) != 0)
                 {
                   for (j = 0; j < num; j++)
                     {
@@ -1077,7 +1076,7 @@ mng_save_image (const gchar  *filename,
                     }
                 }
               else
-                if (((png_info_ptr->valid & PNG_INFO_PLTE) == PNG_INFO_PLTE)
+                if ((png_get_PLTE(png_ptr, png_info_ptr, &palette, &num_palette) != 0)
                     && (layer_bpp == 2))
                 {
                   for (j = 0; j < num; j++)
$NetBSD: patch-af,v 1.8 2011/04/19 10:28:31 wiz Exp $

Fix build with png-1.5.
https://bugzilla.gnome.org/show_bug.cgi?id=640409

--- plug-ins/common/file-png.c.orig	2010-07-13 20:22:27.000000000 +0000
+++ plug-ins/common/file-png.c
@@ -653,7 +653,11 @@ on_read_error (png_structp png_ptr, png_
                                 error_data->drawable->width, num);
     }
 
+#if (PNG_LIBPNG_VER < 10500)
   longjmp (png_ptr->jmpbuf, 1);
+#else
+  png_longjmp (png_ptr, 1);
+#endif
 }
 
 /*
@@ -697,7 +701,7 @@ load_image (const gchar  *filename,
   pp = png_create_read_struct (PNG_LIBPNG_VER_STRING, NULL, NULL, NULL);
   info = png_create_info_struct (pp);
 
-  if (setjmp (pp->jmpbuf))
+  if (setjmp (png_jmpbuf(pp)))
     {
       g_set_error (error, G_FILE_ERROR, G_FILE_ERROR_FAILED,
                    _("Error while reading '%s'. File corrupted?"),
@@ -738,17 +742,17 @@ load_image (const gchar  *filename,
    * Latest attempt, this should be my best yet :)
    */
 
-  if (info->bit_depth == 16)
+  if (png_get_bit_depth(pp, info) == 16)
     {
       png_set_strip_16 (pp);
     }
 
-  if (info->color_type == PNG_COLOR_TYPE_GRAY && info->bit_depth < 8)
+  if (png_get_color_type(pp, info) == PNG_COLOR_TYPE_GRAY && png_get_bit_depth(pp, info) < 8)
     {
       png_set_expand (pp);
     }
 
-  if (info->color_type == PNG_COLOR_TYPE_PALETTE && info->bit_depth < 8)
+  if (png_get_color_type(pp, info) == PNG_COLOR_TYPE_PALETTE && png_get_bit_depth(pp, info) < 8)
     {
       png_set_packing (pp);
     }
@@ -757,8 +761,8 @@ load_image (const gchar  *filename,
    * Expand G+tRNS to GA, RGB+tRNS to RGBA
    */
 
-  if (info->color_type != PNG_COLOR_TYPE_PALETTE &&
-      (info->valid & PNG_INFO_tRNS))
+  if (png_get_color_type(pp, info) != PNG_COLOR_TYPE_PALETTE &&
+      png_get_valid(pp, info, PNG_INFO_tRNS) != 0)
     {
       png_set_expand (pp);
     }
@@ -775,7 +779,7 @@ load_image (const gchar  *filename,
    */
 
   if (png_get_valid (pp, info, PNG_INFO_tRNS) &&
-      info->color_type == PNG_COLOR_TYPE_PALETTE)
+      png_get_color_type(pp, info) == PNG_COLOR_TYPE_PALETTE)
     {
       png_get_tRNS (pp, info, &alpha_ptr, &num, NULL);
       /* Copy the existing alpha values from the tRNS chunk */
@@ -797,7 +801,7 @@ load_image (const gchar  *filename,
 
   png_read_update_info (pp, info);
 
-  switch (info->color_type)
+  switch (png_get_color_type(pp, info))
     {
     case PNG_COLOR_TYPE_RGB:           /* RGB */
       bpp = 3;
@@ -836,7 +840,7 @@ load_image (const gchar  *filename,
       return -1;
     }
 
-  image = gimp_image_new (info->width, info->height, image_type);
+  image = gimp_image_new (png_get_image_width(pp, info), png_get_image_height(pp, info), image_type);
   if (image == -1)
     {
       g_set_error (error, 0, 0,
@@ -849,7 +853,7 @@ load_image (const gchar  *filename,
    * Create the "background" layer to hold the image...
    */
 
-  layer = gimp_layer_new (image, _("Background"), info->width, info->height,
+  layer = gimp_layer_new (image, _("Background"), png_get_image_width(pp, info), png_get_image_height(pp, info),
                           layer_type, 100, GIMP_NORMAL_MODE);
   gimp_image_add_layer (image, layer, 0);
 
@@ -883,7 +887,7 @@ load_image (const gchar  *filename,
 
       gimp_layer_set_offsets (layer, offset_x, offset_y);
 
-      if ((abs (offset_x) > info->width) || (abs (offset_y) > info->height))
+      if ((abs (offset_x) > png_get_image_width(pp, info)) || (abs (offset_y) > png_get_image_height(pp, info)))
         {
           if (interactive)
             g_message (_("The PNG file specifies an offset that caused "
@@ -938,23 +942,27 @@ load_image (const gchar  *filename,
 
   empty = 0; /* by default assume no full transparent palette entries */
 
-  if (info->color_type & PNG_COLOR_MASK_PALETTE)
+  if (png_get_color_type(pp, info) & PNG_COLOR_MASK_PALETTE)
     {
+      png_colorp palette;
+      int num_palette;
+      png_get_PLTE(pp, info, &palette, &num_palette);
+
       if (png_get_valid (pp, info, PNG_INFO_tRNS))
         {
           for (empty = 0; empty < 256 && alpha[empty] == 0; ++empty)
             /* Calculates number of fully transparent "empty" entries */;
 
           /*  keep at least one entry  */
-          empty = MIN (empty, info->num_palette - 1);
+          empty = MIN (empty, num_palette - 1);
 
-          gimp_image_set_colormap (image, (guchar *) (info->palette + empty),
-                                   info->num_palette - empty);
+          gimp_image_set_colormap (image, (guchar *) (palette + empty),
+                                   num_palette - empty);
         }
       else
         {
-          gimp_image_set_colormap (image, (guchar *) info->palette,
-                                   info->num_palette);
+          gimp_image_set_colormap (image, (guchar *) palette,
+                                   num_palette);
         }
     }
 
@@ -972,18 +980,18 @@ load_image (const gchar  *filename,
    */
 
   tile_height = gimp_tile_height ();
-  pixel = g_new0 (guchar, tile_height * info->width * bpp);
+  pixel = g_new0 (guchar, tile_height * png_get_image_width(pp, info) * bpp);
   pixels = g_new (guchar *, tile_height);
 
   for (i = 0; i < tile_height; i++)
-    pixels[i] = pixel + info->width * info->channels * i;
+    pixels[i] = pixel + png_get_image_width(pp, info) * png_get_channels(pp, info) * i;
 
   /* Install our own error handler to handle incomplete PNG files better */
   error_data.drawable    = drawable;
   error_data.pixel       = pixel;
   error_data.tile_height = tile_height;
-  error_data.width       = info->width;
-  error_data.height      = info->height;
+  error_data.width       = png_get_image_width(pp, info);
+  error_data.height      = png_get_image_height(pp, info);
   error_data.bpp         = bpp;
   error_data.pixel_rgn   = &pixel_rgn;
 
@@ -996,10 +1004,10 @@ load_image (const gchar  *filename,
        */
 
       for (begin = 0, end = tile_height;
-           begin < info->height; begin += tile_height, end += tile_height)
+           begin < png_get_image_height(pp, info); begin += tile_height, end += tile_height)
         {
-          if (end > info->height)
-            end = info->height;
+          if (end > png_get_image_height(pp, info))
+            end = png_get_image_height(pp, info);
 
           num = end - begin;
 
@@ -1016,10 +1024,10 @@ load_image (const gchar  *filename,
           gimp_pixel_rgn_set_rect (&pixel_rgn, pixel, 0, begin,
                                    drawable->width, num);
 
-          memset (pixel, 0, tile_height * info->width * bpp);
+          memset (pixel, 0, tile_height * png_get_image_width(pp, info) * bpp);
 
           gimp_progress_update (((gdouble) pass +
-                                 (gdouble) end / (gdouble) info->height) /
+                                 (gdouble) end / (gdouble) png_get_image_height(pp, info)) /
                                 (gdouble) num_passes);
         }
     }
@@ -1072,7 +1080,8 @@ load_image (const gchar  *filename,
 
   {
     png_uint_32 proflen;
-    png_charp   profname, profile;
+    png_charp   profname;
+    png_bytep   profile;
     int         profcomp;
 
     if (png_get_iCCP (pp, info, &profname, &profcomp, &profile, &proflen))
@@ -1200,6 +1209,8 @@ save_image (const gchar  *filename,
   guchar red, green, blue;      /* Used for palette background */
   time_t cutime;                /* Time since epoch */
   struct tm *gmt;               /* GMT broken down */
+  int color_type;               /* type of colors in image */
+  int bit_depth;                /* width of colors in bit */
 
   guchar remap[256];            /* Re-mapping for the palette */
 
@@ -1208,7 +1219,9 @@ save_image (const gchar  *filename,
   if (pngvals.comment)
     {
       GimpParasite *parasite;
+#ifndef PNG_iTXt_SUPPORTED
       gsize text_length = 0;
+#endif
 
       parasite = gimp_image_parasite_find (orig_image_ID, "gimp-comment");
       if (parasite)
@@ -1249,7 +1262,7 @@ save_image (const gchar  *filename,
   pp = png_create_write_struct (PNG_LIBPNG_VER_STRING, NULL, NULL, NULL);
   info = png_create_info_struct (pp);
 
-  if (setjmp (pp->jmpbuf))
+  if (setjmp (png_jmpbuf(pp)))
     {
       g_set_error (error, 0, 0,
                    _("Error while saving '%s'. Could not save image."),
@@ -1291,11 +1304,6 @@ save_image (const gchar  *filename,
 
   png_set_compression_level (pp, pngvals.compression_level);
 
-  info->width          = drawable->width;
-  info->height         = drawable->height;
-  info->bit_depth      = 8;
-  info->interlace_type = pngvals.interlaced;
-
   /*
    * Initialise remap[]
    */
@@ -1304,44 +1312,48 @@ save_image (const gchar  *filename,
 
   /*
    * Set color type and remember bytes per pixel count
+   * Also fix bit depths for (possibly) smaller colormap images
    */
 
+  bit_depth = 8;
+
   switch (type)
     {
     case GIMP_RGB_IMAGE:
-      info->color_type = PNG_COLOR_TYPE_RGB;
+      color_type = PNG_COLOR_TYPE_RGB;
       bpp = 3;
       break;
 
     case GIMP_RGBA_IMAGE:
-      info->color_type = PNG_COLOR_TYPE_RGB_ALPHA;
+      color_type = PNG_COLOR_TYPE_RGB_ALPHA;
       bpp = 4;
       break;
 
     case GIMP_GRAY_IMAGE:
-      info->color_type = PNG_COLOR_TYPE_GRAY;
+      color_type = PNG_COLOR_TYPE_GRAY;
       bpp = 1;
       break;
 
     case GIMP_GRAYA_IMAGE:
-      info->color_type = PNG_COLOR_TYPE_GRAY_ALPHA;
+      color_type = PNG_COLOR_TYPE_GRAY_ALPHA;
       bpp = 2;
       break;
 
     case GIMP_INDEXED_IMAGE:
+    case GIMP_INDEXEDA_IMAGE:
       bpp = 1;
-      info->color_type = PNG_COLOR_TYPE_PALETTE;
-      info->valid |= PNG_INFO_PLTE;
-      info->palette =
-        (png_colorp) gimp_image_get_colormap (image_ID, &num_colors);
-      info->num_palette = num_colors;
-      break;
+      if (type == GIMP_INDEXEDA_IMAGE)
+        bpp = 2;
 
-    case GIMP_INDEXEDA_IMAGE:
-      bpp = 2;
-      info->color_type = PNG_COLOR_TYPE_PALETTE;
-      /* fix up transparency */
-      respin_cmap (pp, info, remap, image_ID, drawable);
+      color_type = PNG_COLOR_TYPE_PALETTE;
+      gimp_image_get_colormap (image_ID, &num_colors);
+      if (num_colors <= 2)
+        bit_depth = 1;
+      else if (num_colors <= 4)
+        bit_depth = 2;
+      else if (num_colors <= 16)
+        bit_depth = 4;
+      /* otherwise the default is fine */
       break;
 
     default:
@@ -1349,19 +1361,14 @@ save_image (const gchar  *filename,
       return FALSE;
     }
 
-  /*
-   * Fix bit depths for (possibly) smaller colormap images
-   */
+  png_set_IHDR(pp, info, drawable->width, drawable->height, bit_depth, color_type, pngvals.interlaced ? PNG_INTERLACE_ADAM7 : PNG_INTERLACE_NONE, PNG_COMPRESSION_TYPE_BASE, PNG_FILTER_TYPE_BASE);
 
-  if (info->valid & PNG_INFO_PLTE)
+  if (type == GIMP_INDEXED_IMAGE)
+    png_set_PLTE(pp, info, (png_colorp) gimp_image_get_colormap (image_ID, &num_colors), num_colors);
+  else if (type == GIMP_INDEXEDA_IMAGE)
     {
-      if (info->num_palette <= 2)
-        info->bit_depth = 1;
-      else if (info->num_palette <= 4)
-        info->bit_depth = 2;
-      else if (info->num_palette <= 16)
-        info->bit_depth = 4;
-      /* otherwise the default is fine */
+      /* fix up transparency */
+      respin_cmap (pp, info, remap, image_ID, drawable);
     }
 
   /* All this stuff is optional extras, if the user is aiming for smallest
@@ -1477,7 +1484,7 @@ save_image (const gchar  *filename,
    * Convert unpacked pixels to packed if necessary
    */
 
-  if (info->color_type == PNG_COLOR_TYPE_PALETTE && info->bit_depth < 8)
+  if (png_get_color_type(pp, info) == PNG_COLOR_TYPE_PALETTE && png_get_bit_depth(pp, info) < 8)
     png_set_packing (pp);
 
   /*
@@ -1529,7 +1536,7 @@ save_image (const gchar  *filename,
 
           /* If we're dealing with a paletted image with
            * transparency set, write out the remapped palette */
-          if (info->valid & PNG_INFO_tRNS)
+          if (png_get_valid(pp, info, PNG_INFO_tRNS))
             {
               guchar inverse_remap[256];
 
@@ -1549,7 +1556,7 @@ save_image (const gchar  *filename,
             }
           /* Otherwise if we have a paletted image and transparency
            * couldn't be set, we ignore the alpha channel */
-          else if (info->valid & PNG_INFO_PLTE && bpp == 2)
+          else if (png_get_valid(pp, info, PNG_INFO_PLTE) && bpp == 2)
             {
               for (i = 0; i < num; ++i)
                 {
@@ -1564,7 +1571,7 @@ save_image (const gchar  *filename,
           png_write_rows (pp, pixels, num);
 
           gimp_progress_update (((double) pass + (double) end /
-                                 (double) info->height) /
+                                 (double) png_get_image_height(pp, info)) /
                                 (double) num_passes);
         }
     }
