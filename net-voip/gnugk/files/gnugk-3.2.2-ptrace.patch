diff -ur a/capctrl.cxx b/capctrl.cxx
--- a/capctrl.cxx	2011-11-28 13:33:41.000000000 +0100
+++ b/capctrl.cxx	2013-03-06 02:53:41.038731734 +0100
@@ -255,6 +255,7 @@
 	m_cliCallVolumes = cliCallVolumes;
 
 	PTRACE(5, "CAPCTRL\t" << ipRules << " IP rules loaded");
+#if PTRACING
 	if (PTrace::CanTrace(6)) {
 		ostream &strm = PTrace::Begin(6, __FILE__, __LINE__);
 		strm << "Per IP call volume rules:" << endl;
@@ -264,8 +265,10 @@
 		}
 		PTrace::End(strm);
 	}
+#endif
 
 	PTRACE(5, "CAPCTRL\t" << h323IdRules << " H.323 ID rules loaded");
+#if PTRACING
 	if (PTrace::CanTrace(6)) {
 		ostream &strm = PTrace::Begin(6, __FILE__, __LINE__);
 		strm << "Per H.323 ID call volume rules:" << endl;
@@ -275,8 +278,10 @@
 		}
 		PTrace::End(strm);
 	}
+#endif
 
 	PTRACE(5, "CAPCTRL\t" << cliRules << " CLI rules loaded");
+#if PTRACING
 	if (PTrace::CanTrace(6)) {
 		ostream &strm = PTrace::Begin(6, __FILE__, __LINE__);
 		strm << "Per CLI call volume rules:" << endl;
@@ -286,6 +291,7 @@
 		}
 		PTrace::End(strm);
 	}
+#endif
 }
 
 PString CapacityControl::PrintRules()
diff -ur a/clirw.cxx b/clirw.cxx
--- a/clirw.cxx	2012-05-07 16:18:04.000000000 +0200
+++ b/clirw.cxx	2013-03-06 02:53:41.038731734 +0100
@@ -456,6 +456,7 @@
 	}
 	
 	PTRACE(5, "CLIRW\t" << inboundRules << " inbound rules loaded");
+#if PTRACING
 	if (PTrace::CanTrace(6)) {
 		ostream &strm = PTrace::Begin(6, __FILE__, __LINE__);
 		strm << "Inbound CLI rewrite rules:" << endl;
@@ -466,8 +467,10 @@
 		}
 		PTrace::End(strm);
 	}
+#endif
 
 	PTRACE(5, "CLIRW\t" << outboundRules << " outbound rules loaded");
+#if PTRACING
 	if (PTrace::CanTrace(6)) {
 		ostream &strm = PTrace::Begin(6, __FILE__, __LINE__);
 		strm << "Outbound CLI rewrite rules:" << endl;
@@ -480,6 +483,7 @@
 			}
 		PTrace::End(strm);
 	}
+#endif
 
 	m_processSourceAddress = Toolkit::AsBool(
 		cfg->GetString(CLIRewriteSection, ProcessSourceAddress, "1")
diff -ur a/gkacct.cxx b/gkacct.cxx
--- a/gkacct.cxx	2012-12-10 20:32:52.000000000 +0100
+++ b/gkacct.cxx	2013-03-06 02:53:41.038731734 +0100
@@ -919,6 +919,7 @@
 		switch (status)
 		{
 		case GkAcctLogger::Ok:
+#if PTRACING
 			if (PTrace::CanTrace(3)) {
 				ostream& strm = PTrace::Begin(3,__FILE__,__LINE__);
 				strm << "GKACCT\t" << logger->GetName() << " logged event " << evt;
@@ -926,9 +927,11 @@
 					strm << " for call no. " << call->GetCallNumber();
 				PTrace::End(strm);
 			}
+#endif
 			break;
 			
 		default:
+#if PTRACING
 			if (PTrace::CanTrace(3)) {
 				ostream& strm = PTrace::Begin(3, __FILE__, __LINE__);
 				strm << "GKACCT\t" << logger->GetName() << " failed to log event " << evt;
@@ -937,6 +940,7 @@
 					strm << " for call no. " << call->GetCallNumber();
 				PTrace::End(strm);
 			}
+#endif
 			// required and sufficient rules always determine 
 			// status of the request
 			if (logger->GetControlFlag() == GkAcctLogger::Required
@@ -954,7 +958,8 @@
 	// a last rule determine status of the the request
 	if (finalResult && status != GkAcctLogger::Ok)
 		finalResult = false;
-		
+
+#if PTRACING		
 	if (PTrace::CanTrace(2)) {
 		ostream& strm = PTrace::Begin(2, __FILE__, __LINE__);
 		strm << "GKACCT\t" << (finalResult ? "Successfully logged event " 
@@ -965,6 +970,7 @@
 		if (!finalResult)
 			SNMP_TRAP(7, SNMPError, Accounting, "Failed to log event " + evt);
 	}
+#endif
 	return finalResult;
 }
 
@@ -987,6 +993,7 @@
 		switch (status)
 		{
 		case GkAcctLogger::Ok:
+#if PTRACING
 			if (PTrace::CanTrace(3)) {
 				ostream& strm = PTrace::Begin(3,__FILE__,__LINE__);
 				strm << "GKACCT\t" << logger->GetName() << " logged event " << evt;
@@ -994,9 +1001,11 @@
 					strm << " for endpoint " << ep->GetEndpointIdentifier().GetValue();
 				PTrace::End(strm);
 			}
+#endif
 			break;
 			
 		default:
+#if PTRACING
 			if (PTrace::CanTrace(3)) {
 				ostream& strm = PTrace::Begin(3, __FILE__, __LINE__);
 				strm << "GKACCT\t" << logger->GetName() << " failed to log event " << evt;
@@ -1005,6 +1014,7 @@
 				PTrace::End(strm);
 				SNMP_TRAP(7, SNMPError, Accounting, logger->GetName() + " failed to log event " + PString(evt));
 			}
+#endif
 			// required and sufficient rules always determine 
 			// status of the request
 			if (logger->GetControlFlag() == GkAcctLogger::Required
@@ -1023,6 +1033,7 @@
 	if (finalResult && status != GkAcctLogger::Ok)
 		finalResult = false;
 		
+#if PTRACING
 	if (PTrace::CanTrace(2)) {
 		ostream& strm = PTrace::Begin(2, __FILE__, __LINE__);
 		strm << "GKACCT\t" << (finalResult ? "Successfully logged event " 
@@ -1033,6 +1044,7 @@
 		if (!finalResult)
 			SNMP_TRAP(7, SNMPError, Accounting, "Failed to log event " + evt);
 	}
+#endif
 	return finalResult;
 }
 
diff -ur a/gkauth.cxx b/gkauth.cxx
--- a/gkauth.cxx	2012-12-03 10:29:52.000000000 +0100
+++ b/gkauth.cxx	2013-03-06 02:53:38.494731795 +0100
@@ -834,6 +834,7 @@
 	}
 
 	if (mechanisms.GetSize() > 0 && algorithmOIDs.GetSize() > 0) {
+#if PTRACING
 		if (PTrace::CanTrace(4)) {
 			ostream& strm = PTrace::Begin(4,__FILE__,__LINE__);
 			strm <<"GkAuth\tH.235 capabilities selected for GCF:\n";
@@ -845,6 +846,7 @@
 				strm << "\t\t" << algorithmOIDs[i] << '\n';
 			PTrace::End(strm);
 		}
+#endif
 #ifdef OpenH323Factory
 	}
 #else
diff -ur a/gk.cxx b/gk.cxx
--- a/gk.cxx	2013-01-04 13:20:20.000000000 +0100
+++ b/gk.cxx	2013-03-06 02:53:38.494731795 +0100
@@ -1076,9 +1076,11 @@
 bool Gatekeeper::InitLogging(const PArgList & args)
 {
 	// Syslog is the default when compiled as service, but we don't want that
+#if PTRACING
 	PTrace::ClearOptions(PTrace::SystemLogStream);
 	PTrace::SetOptions(PTrace::DateAndTime | PTrace::TraceLevel | PTrace::FileAndLine);
 	PTrace::SetLevel(args.GetOptionCount('t'));
+#endif
 	if (args.HasOption('o')) {
 		if (!SetLogFilename(args.GetOptionString('o'))) {
 			cerr << "Warning: could not open the log file \""
@@ -1563,7 +1565,9 @@
 		EnableLogFileRotation(false);
 	}
 
+#if PTRACING
 	PTrace::SetStream(&cerr);
+#endif
 
 #ifndef hasDeletingSetStream
 	delete m_logFile;
@@ -1578,7 +1582,9 @@
 		return false;
 	}
 	m_logFile->SetPosition(0, PFile::End);
+#if PTRACING
 	PTrace::SetStream(m_logFile);
+#endif
 	return true;
 }
 
@@ -1588,7 +1594,9 @@
 
 	if (m_logFile) {
 		PTRACEX(1, "GK\tLogging closed (log file rotation)");
+#if PTRACING
 		PTrace::SetStream(&cerr); // redirect to cerr
+#endif
 #ifndef hasDeletingSetStream
 		delete m_logFile;
 #endif
@@ -1625,7 +1633,9 @@
 	}
 
 	m_logFile->SetPosition(0, PFile::End);
+#if PTRACING
 	PTrace::SetStream(m_logFile);
+#endif
 	PTRACEX(1, "GK\tLogging restarted\n" + Toolkit::GKVersion());
 	return true;
 }
@@ -1636,7 +1646,9 @@
 
 	if (m_logFile) {
 		PTRACEX(1, "GK\tLogging closed (reopen log file)");
+#if PTRACING
 		PTrace::SetStream(&cerr); // redirect to cerr
+#endif
 #ifndef hasDeletingSetStream
 		delete m_logFile;
 #endif
@@ -1665,7 +1677,9 @@
 		}
 	}
 	m_logFile->SetPosition(0, PFile::End);
+#if PTRACING
 	PTrace::SetStream(m_logFile);
+#endif
 	PTRACEX(1, "GK\tLogging restarted\n" + Toolkit::GKVersion());
 	return true;
 }
@@ -1677,7 +1691,9 @@
 	if (m_logFile) {
 		PTRACEX(1, "GK\tLogging closed");
 	}
+#if PTRACING
 	PTrace::SetStream(&cerr);
+#endif
 #ifndef hasDeletingSetStream
 	delete m_logFile;
 #endif
diff -ur a/GkStatus.cxx b/GkStatus.cxx
--- a/GkStatus.cxx	2012-12-18 16:16:18.000000000 +0100
+++ b/GkStatus.cxx	2013-03-06 02:53:38.494731795 +0100
@@ -1314,6 +1314,7 @@
 			);
 	} else {
 		if (args[1] *= "trc") {
+#if PTRACING
 			if(args.GetSize() >= 3) {
 				if((args[2] == "-") && (PTrace::GetLevel() > 0)) 
 					PTrace::SetLevel(PTrace::GetLevel()-1);
@@ -1322,6 +1323,7 @@
 				else PTrace::SetLevel(args[2].AsInteger());
 			}
 			WriteString(PString(PString::Printf, "Trace Level is now %d\r\n", PTrace::GetLevel()));
+#endif
 		} else if (args[1] *= "cfg") {
 			if (args.GetSize()>=4)
 				WriteString(GkConfig()->GetString(args[2],args[3],"") + "\r\n;\r\n");
diff -ur a/ipauth.cxx b/ipauth.cxx
--- a/ipauth.cxx	2011-11-28 13:33:41.000000000 +0100
+++ b/ipauth.cxx	2013-03-06 02:53:41.038731734 +0100
@@ -226,6 +226,7 @@
 	
 	PTRACE(5, GetName() << "\t" << m_authList.size() << " entries loaded");
 
+#if PTRACING
 	if (PTrace::CanTrace(6)) {
 		ostream &strm = PTrace::Begin(6, __FILE__, __LINE__);
 		strm << GetName() << " entries:\n";
@@ -238,6 +239,7 @@
 		}
 		PTrace::End(strm);
 	}
+#endif
 
 	if (dynamicCfg) {
 		delete cfg;
diff -ur a/RasSrv.cxx b/RasSrv.cxx
--- a/RasSrv.cxx	2012-12-28 16:21:55.000000000 +0100
+++ b/RasSrv.cxx	2013-03-06 02:53:38.494731795 +0100
@@ -244,6 +244,7 @@
 		delete msg;
 		return NULL;
 	}
+#if PTRACING
 	if ((msg->GetTag() != H225_RasMessage::e_serviceControlIndication && msg->GetTag() != H225_RasMessage::e_serviceControlResponse)
 		||  PTrace::CanTrace(5)) {
 	if (PTrace::CanTrace(3))
@@ -251,17 +252,20 @@
 	else
 		PTRACE(2, "RAS\tReceived " << msg->GetTagName() << " from " << AsString(msg->m_peerAddr, msg->m_peerPort));
 	}
+#endif
 	msg->m_localAddr = GetLocalAddr(msg->m_peerAddr);
 	return msg;
 }
 
 bool RasListener::SendRas(const H225_RasMessage & rasobj, const Address & addr, WORD pt)
 {
+#if PTRACING
 	if ( ((rasobj.GetTag() != H225_RasMessage::e_serviceControlIndication && rasobj.GetTag() != H225_RasMessage::e_serviceControlResponse) && PTrace::CanTrace(3))
 		|| PTrace::CanTrace(5))
 		PTRACE(3, "RAS\tSend to " << AsString(addr, pt) << '\n' << setprecision(2) << rasobj);
 	else
 		PTRACE(2, "RAS\tSend " << RasName[rasobj.GetTag()] << " to " << AsString(addr, pt));
+#endif
 
 	PPER_Stream wtstrm;
 	rasobj.Encode(wtstrm);
diff -ur a/RasTbl.cxx b/RasTbl.cxx
--- a/RasTbl.cxx	2013-01-04 13:20:20.000000000 +0100
+++ b/RasTbl.cxx	2013-03-06 02:53:38.498731794 +0100
@@ -1870,6 +1870,7 @@
 		endpoints->push_back(routes.front().m_destEndpoint.operator->());
 	}
 
+#if PTRACING
 	if (PTrace::CanTrace(4)) {
 		ostream &strm = PTrace::Begin(4, __FILE__, __LINE__);
 		strm << "RASTBL\tPrefix match for gateways: ";
@@ -1880,6 +1881,7 @@
 		}
 		PTrace::End(strm);
 	}
+#endif
 
 	return true;
 }
diff -ur a/Routing.cxx b/Routing.cxx
--- a/Routing.cxx	2012-12-28 21:35:42.000000000 +0100
+++ b/Routing.cxx	2013-03-06 02:53:38.498731794 +0100
@@ -1452,6 +1452,7 @@
 	PTRACE(5, "ROUTING\t" << m_name << " policy loaded with " << m_prefixes.size()
 		<< " prefix entries");
 
+#if PTRACING
 	if (PTrace::CanTrace(6)) {
 		ostream &strm = PTrace::Begin(6, __FILE__, __LINE__);
 		strm << "ROUTING\t" << m_name << " policy prefixes:" << endl;
@@ -1461,6 +1462,7 @@
 				<< m_prefixes[i].m_maxLength << endl;
 		PTrace::End(strm);
 	}
+#endif
 }
 
 bool NumberAnalysisPolicy::OnRequest(AdmissionRequest & request)
diff -ur a/Toolkit.cxx b/Toolkit.cxx
--- a/Toolkit.cxx	2013-01-10 10:23:01.000000000 +0100
+++ b/Toolkit.cxx	2013-03-06 02:53:38.498731794 +0100
@@ -960,6 +960,7 @@
 		return;
 	}
 
+#if PTRACING
 	if (PTrace::CanTrace(3) && (m_GWRewrite.GetSize() < 100)) {
 		for (PINDEX i = 0; i < m_GWRewrite.GetSize(); ++i) {
 			// In
@@ -973,6 +974,7 @@
 			}
 		}
 	}
+#endif
 	PTRACE(2, "GK\tLoaded " << m_GWRewrite.GetSize() << " GW entries with rewrite info");
 }
 
@@ -1581,7 +1583,9 @@
 	// read the gatekeeper name from the config file, because it might be used as a key into the SQL config
 	m_GKName = Config()->GetString("Name", "OpenH323GK");
 
+#if PTRACING
 	PTrace::SetLevel(GkConfig()->GetInteger("TraceLevel", PTrace::GetLevel()));
+#endif
 
 	// set the max size of an array in an ASN encoded message (eg. max length of alias list)
 	PINDEX maxArraySize = GkConfig()->GetInteger("MaxASNArraySize", 0);
diff -ur a/yasocket.cxx b/yasocket.cxx
--- a/yasocket.cxx	2012-12-10 20:32:52.000000000 +0100
+++ b/yasocket.cxx	2013-03-06 02:53:38.498731794 +0100
@@ -1018,10 +1018,12 @@
 		return false;
 	}
 	ConfigReloadMutex.StartRead();
+#if PTRACING
 	if (PTrace::CanTrace(6)) {
 		PString msg(PString::Printf, "\t%u sockets selected from %u, total %u/%u", slist.GetSize(), ss, m_socksize, m_rmsize);
 		PTRACE(6, GetName() << msg);
 	}
+#endif
 	return true;
 }
 
