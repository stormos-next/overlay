--- OpenCV-2.3.1-0-vanilla/CMakeLists.txt
+++ OpenCV-2.3.1-2-options/CMakeLists.txt
@@ -72,13 +72,13 @@
 # Build static or dynamic libs?
 # Default: dynamic libraries
 # ----------------------------------------------------------------------------
-set(BUILD_SHARED_LIBS ON CACHE BOOL "Build shared libraries (.dll/.so) instead of static ones (.lib/.a)")
+OPTION(BUILD_SHARED_LIBS "Build shared libraries (.dll/.so) instead of static ones (.lib/.a)" ON)
 
 # ----------------------------------------------------------------------------
 # Include debug info into debug libs?
 # Default: yes
 # ----------------------------------------------------------------------------
-set(BUILD_WITH_DEBUG_INFO ON CACHE BOOL "Include debug info into debug libs")
+OPTION(BUILD_WITH_DEBUG_INFO "Include debug info into debug libs" ON)
 
 # ----------------------------------------------------------------------------
 #  Get actual OpenCV version number from sources
@@ -318,23 +318,23 @@
 
 # Build/install (or not) some apps:
 # ===================================================
-set(BUILD_EXAMPLES OFF CACHE BOOL "Build all examples")
-set(INSTALL_C_EXAMPLES OFF CACHE BOOL "Install C examples")
-set(INSTALL_PYTHON_EXAMPLES OFF CACHE BOOL "Install Python examples")
+option(BUILD_EXAMPLES "Build all examples" OFF)
+option(INSTALL_C_EXAMPLES "Install C examples" OFF)
+option(INSTALL_PYTHON_EXAMPLES "Install Python examples" OFF)
 if(ANDROID)
-    set(INSTALL_ANDROID_EXAMPLES OFF CACHE BOOL "Install Android examples")
+    option(INSTALL_ANDROID_EXAMPLES "Install Android examples" OFF)
 endif()
 
 # Build tests:
 # ===================================================
-set(BUILD_TESTS ON CACHE BOOL "Build tests")
+option(BUILD_TESTS "Build tests" ON)
 
 # Build 3rdparty libraries under unix
 # ===================================================
 if(WIN32)
-    set(OPENCV_BUILD_3RDPARTY_LIBS TRUE  CACHE BOOL "Build 3rd party libraries")
+    option(OPENCV_BUILD_3RDPARTY_LIBS "Build 3rd party libraries" TRUE)
 else()
-    set(OPENCV_BUILD_3RDPARTY_LIBS FALSE CACHE BOOL "Build 3rd party libraries")
+    option(OPENCV_BUILD_3RDPARTY_LIBS "Build 3rd party libraries" FALSE)
 endif()
 
 include(OpenCVPCHSupport.cmake REQUIRED)
@@ -344,7 +344,7 @@
 endif()
 
 if(PCHSupport_FOUND)
-    SET(USE_PRECOMPILED_HEADERS ON CACHE BOOL "Use precompiled headers")
+    option(USE_PRECOMPILED_HEADERS "Use precompiled headers" ON)
 else()
     SET(USE_PRECOMPILED_HEADERS OFF CACHE BOOL "Use precompiled headers" FORCE)
 endif()
@@ -356,8 +356,8 @@
 endif()
 
 if(CMAKE_COMPILER_IS_GNUCXX)
-    set(ENABLE_PROFILING OFF CACHE BOOL "Enable profiling in the GCC compiler (Add flags: -g -pg)")
-    set(USE_OMIT_FRAME_POINTER ON CACHE BOOL "Enable -fomit-frame-pointer for GCC")
+    option(ENABLE_PROFILING "Enable profiling in the GCC compiler (Add flags: -g -pg)" OFF)
+    option(USE_OMIT_FRAME_POINTER "Enable -fomit-frame-pointer for GCC" ON)
 
     if(${CMAKE_SYSTEM_PROCESSOR} MATCHES amd64.*|x86_64.*)
         set(X86_64 1)
@@ -376,59 +376,59 @@
         #ELSE()
         #    SET(_USE_FAST_MATH ON)
         #ENDIF()
-        set(USE_FAST_MATH ${_USE_FAST_MATH} CACHE BOOL "Enable -ffast-math (not recommended for GCC 4.6.x)")
-        set(ENABLE_SSE ON CACHE BOOL "Enable SSE instructions")
-        set(ENABLE_SSE2 ON CACHE BOOL "Enable SSE2 instructions")
-        set(ENABLE_SSE3 OFF CACHE BOOL "Enable SSE3 instructions")
-        set(ENABLE_SSSE3 OFF CACHE BOOL "Enable SSSE3 instructions")
-        set(ENABLE_SSE41 OFF CACHE BOOL "Enable SSE4.1 instructions")
-        set(ENABLE_SSE42 OFF CACHE BOOL "Enable SSE4.2 instructions")
+        option(USE_FAST_MATH "Enable -ffast-math for GCC" ON)
+        option(ENABLE_SSE "Enable SSE instructions" ON)
+        option(ENABLE_SSE2 "Enable SSE2 instructions" ON)
+        option(ENABLE_SSE3 "Enable SSE3 instructions" OFF)
+        option(ENABLE_SSSE3 "Enable SSSE3 instructions" OFF)
+        option(ENABLE_SSE41 "Enable SSE4.1 instructions" OFF)
+        option(ENABLE_SSE42 "Enable SSE4.2 instructions" OFF)
     endif()
 endif()
 
 if(MSVC)
-    set(ENABLE_SSE ON CACHE BOOL "Enable SSE instructions for MSVC")
-    set(ENABLE_SSE2 ON CACHE BOOL "Enable SSE2 instructions for MSVC")
+    option(ENABLE_SSE "Enable SSE instructions for MSVC" ON)
+    option(ENABLE_SSE2 "Enable SSE2 instructions for MSVC" ON)
     if(CMAKE_C_COMPILER MATCHES "icc")
-        set(ENABLE_SSE3 OFF CACHE BOOL "Enable SSE3 instructions for ICC")
-        set(ENABLE_SSE4_1 OFF CACHE BOOL "Enable SSE4.1 instructions for ICC")
+        option(ENABLE_SSE3 "Enable SSE3 instructions for ICC" OFF)
+        option(ENABLE_SSE4_1 "Enable SSE4.1 instructions for ICC" OFF)
     endif()
 endif()
 
 # allow fine grained control over which libraries not to link, even if
 # they are available on the system
 # ====================================================================
-set(WITH_PNG ON CACHE BOOL "Include PNG support")
-set(WITH_JPEG ON CACHE BOOL "Include JPEG support")
-set(WITH_JASPER ON CACHE BOOL "Include JPEG2K support")
-set(WITH_TIFF ON CACHE BOOL "Include TIFF support")
-set(WITH_OPENEXR ON CACHE BOOL "Include ILM support via OpenEXR")
+option(WITH_PNG "Include PNG support" ON)
+option(WITH_JPEG "Include JPEG support" ON)
+option(WITH_JASPER "Include JPEG2K support" ON)
+option(WITH_TIFF "Include TIFF support" ON)
+option(WITH_OPENEXR "Include ILM support via OpenEXR" ON)
 
 if(UNIX)
-    set(WITH_FFMPEG ON CACHE BOOL "Include FFMPEG support")
+    option(WITH_FFMPEG "Include FFMPEG support" ON)
     if(NOT APPLE)
-        set(WITH_UNICAP OFF CACHE BOOL "Include Unicap support (GPL)")
-        set(WITH_GTK ON CACHE BOOL "Include GTK support")
-        set(WITH_GSTREAMER ON CACHE BOOL "Include Gstreamer support")
-        set(WITH_V4L ON CACHE BOOL "Include Video 4 Linux support")
-        set(WITH_XINE OFF CACHE BOOL "Include Xine support (GPL)")
+        option(WITH_UNICAP "Include Unicap support (GPL)" OFF)
+        option(WITH_GTK "Include GTK support" ON)
+        option(WITH_GSTREAMER "Include Gstreamer support" ON)
+        option(WITH_V4L "Include Video 4 Linux support" ON)
+        option(WITH_XINE "Include Xine support (GPL)" OFF)
     endif()
-    set(WITH_PVAPI ON CACHE BOOL "Include Prosilica GigE support")
-    set(WITH_1394 ON CACHE BOOL "Include IEEE1394 support")
+    option(WITH_PVAPI "Include Prosilica GigE support" ON)
+    option(WITH_1394 "Include IEEE1394 support" ON)
 endif()
 
 if(APPLE)
-    set(WITH_CARBON OFF CACHE BOOL "Use Carbon for UI instead of Cocoa")
-    set(WITH_QUICKTIME OFF CACHE BOOL "Use QuickTime for Video I/O insted of QTKit")
+    option(WITH_CARBON "Use Carbon for UI instead of Cocoa" OFF)
+    option(WITH_QUICKTIME "Use QuickTime for Video I/O insted of QTKit" OFF)
 endif()
 
-set(WITH_TBB OFF CACHE BOOL "Include Intel TBB support")
-set(WITH_IPP OFF CACHE BOOL "Include Intel IPP support")
-set(WITH_EIGEN ON CACHE BOOL "Include Eigen2/Eigen3 support")
-set(WITH_CUDA ON CACHE BOOL "Include NVidia Cuda Runtime support")
-
-set(WITH_OPENNI OFF CACHE BOOL "Include OpenNI support")
-set(WITH_XIMEA OFF CACHE BOOL "Include XIMEA cameras support")
+option(WITH_TBB "Include TBB support" OFF)
+option(WITH_IPP "Include Intel IPP support" OFF)
+option(WITH_EIGEN "Include Eigen2/Eigen3 support" ON)
+option(WITH_CUDA "Include NVidia Cuda Runtime support" ON)
+ 
+option(WITH_OPENNI "Include OpenNI support" OFF)
+option(WITH_XIMEA "Include XIMEA cameras support" OFF)
 
 # ===================================================
 # Macros that checks if module have been installed.
@@ -626,13 +626,13 @@
     include(OpenCVFindOpenEXR.cmake)
 endif()
 
-set(BUILD_DOCS ON CACHE BOOL "Build OpenCV Documentation")
+option(BUILD_DOCS "Build OpenCV Documentation" ON)
 
 if(BUILD_DOCS)
   include(OpenCVFindLATEX.cmake REQUIRED)
 endif()
 
-set(BUILD_NEW_PYTHON_SUPPORT ON CACHE BOOL "Build with Python support")
+option(BUILD_NEW_PYTHON_SUPPORT "Build with Python support" ON)
 
 if (WIN32)
     if ("${CMAKE_BUILD_TYPE}" STREQUAL "Debug")
@@ -836,8 +836,8 @@
 #YV
 ############################### QT ################################
 
-set(WITH_QT OFF CACHE BOOL "Build with Qt Backend support")
-set(WITH_QT_OPENGL OFF CACHE BOOL "Add OpenGL extension to Qt")
+option(WITH_QT "Build with Qt Backend support" OFF)
+option(WITH_QT_OPENGL "Add OpenGL extension to Qt" OFF)
 
 set(HAVE_QT 0)
 set(HAVE_QT_OPENGL 0)
@@ -1054,7 +1054,7 @@
 ################## Extra HighGUI libs on Windows ###################
 
 if(WIN32)
-    set(WITH_VIDEOINPUT ON CACHE BOOL "Build HighGUI with DirectShow support")
+    option(WITH_VIDEOINPUT "Build HighGUI with DirectShow support" ON)
     set(HIGHGUI_LIBRARIES ${HIGHGUI_LIBRARIES} comctl32 gdi32 ole32)
 
     if(WITH_VIDEOINPUT)
@@ -1123,7 +1123,7 @@
 #           Set the maximum level of warnings:
 # ----------------------------------------------------------------------------
 # Should be set to true for development
-set(OPENCV_WARNINGS_ARE_ERRORS OFF CACHE BOOL "Treat warnings as errors")
+option(OPENCV_WARNINGS_ARE_ERRORS "Treat warnings as errors" OFF)
 if (WIN32 AND ${CMAKE_GENERATOR} MATCHES "(MinGW)|(MSYS)")
     set(CMAKE_CXX_FLAGS_RELEASE "-O2 -DNDEBUG" CACHE STRING "")
 endif()
@@ -1222,12 +1222,6 @@ if(CMAKE_COMPILER_IS_GNUCXX)
         endif()
     endif()
 
-    if(X86 OR X86_64)
-        if(NOT APPLE AND CMAKE_SIZEOF_VOID_P EQUAL 4)
-            set(EXTRA_C_FLAGS_RELEASE "${EXTRA_C_FLAGS_RELEASE} -mfpmath=387")
-        endif()
-    endif()
-
     # Profiling?
     if(ENABLE_PROFILING)
         set(EXTRA_C_FLAGS_RELEASE "${EXTRA_C_FLAGS_RELEASE} -pg -g")
@@@ -1494,7 +1494,7 @@
 #-----------------------------------
 # Source package:
 #-----------------------------------
-set(BUILD_PACKAGE ON CACHE BOOL "Enables 'make package_source' command")
+option(BUILD_PACKAGE "Build a installer with the SDK" ON)
 
 if(BUILD_PACKAGE)
     set(TARBALL_NAME "${CMAKE_PROJECT_NAME}-${OPENCV_VERSION_MAJOR}.${OPENCV_VERSION_MINOR}.${OPENCV_VERSION_PATCH}")
