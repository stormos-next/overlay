diff -uprN src.orig/java/org/apache/bcel/verifier/statics/Pass2Verifier.java src/java/org/apache/bcel/verifier/statics/Pass2Verifier.java
--- src.orig/java/org/apache/bcel/verifier/statics/Pass2Verifier.java	2004-12-19 18:28:47.428772488 +0100
+++ src/java/org/apache/bcel/verifier/statics/Pass2Verifier.java	2004-12-19 18:39:36.804052440 +0100
@@ -345,7 +345,7 @@ public final class Pass2Verifier extends
 
 			for (int i=0; i<atts.length; i++){
 				if ((! (atts[i] instanceof SourceFile)) &&
-				    (! (atts[i] instanceof Deprecated))     &&
+				    (! (atts[i] instanceof org.apache.bcel.classfile.Deprecated))     &&
 				    (! (atts[i] instanceof InnerClasses)) &&
 				    (! (atts[i] instanceof Synthetic))){
 					addMessage("Attribute '"+tostring(atts[i])+"' as an attribute of the ClassFile structure '"+tostring(obj)+"' is unknown and will therefore be ignored.");
@@ -519,7 +519,7 @@ public final class Pass2Verifier extends
 			for (int i=0; i<atts.length; i++){
 				if ((! (atts[i] instanceof ConstantValue)) &&
 				    (! (atts[i] instanceof Synthetic))     &&
-				    (! (atts[i] instanceof Deprecated))){
+				    (! (atts[i] instanceof org.apache.bcel.classfile.Deprecated))){
 					addMessage("Attribute '"+tostring(atts[i])+"' as an attribute of Field '"+tostring(obj)+"' is unknown and will therefore be ignored.");
 				}
 				if  (! (atts[i] instanceof ConstantValue)){
@@ -660,7 +660,7 @@ public final class Pass2Verifier extends
 				if ((! (atts[i] instanceof Code)) &&
 				    (! (atts[i] instanceof ExceptionTable))     &&
 				    (! (atts[i] instanceof Synthetic)) &&
-				    (! (atts[i] instanceof Deprecated))){
+				    (! (atts[i] instanceof org.apache.bcel.classfile.Deprecated))){
 					addMessage("Attribute '"+tostring(atts[i])+"' as an attribute of Method '"+tostring(obj)+"' is unknown and will therefore be ignored.");
 				}
 				if ((! (atts[i] instanceof Code)) &&
@@ -702,7 +702,7 @@ public final class Pass2Verifier extends
 				addMessage("SourceFile attribute '"+tostring(obj)+"' has a funny name: remember not to confuse certain parsers working on javap's output. Also, this name ('"+sourcefilename+"') is considered an unqualified (simple) file name only.");
 			}
 		}
-		public void visitDeprecated(Deprecated obj){//vmspec2 4.7.10
+		public void visitDeprecated(org.apache.bcel.classfile.Deprecated obj){//vmspec2 4.7.10
 			checkIndex(obj, obj.getNameIndex(), CONST_Utf8);
 
 			String name = ((ConstantUtf8) cp.getConstant(obj.getNameIndex())).getBytes();
diff -uprN src.orig/java/org/apache/bcel/verifier/statics/StringRepresentation.java src/java/org/apache/bcel/verifier/statics/StringRepresentation.java
--- src.orig/java/org/apache/bcel/verifier/statics/StringRepresentation.java	2004-12-19 18:28:47.429772336 +0100
+++ src/java/org/apache/bcel/verifier/statics/StringRepresentation.java	2004-12-19 18:38:52.087850336 +0100
@@ -172,7 +172,7 @@ public class StringRepresentation extend
 	public void visitConstantValue(ConstantValue obj){
 		tostring = toString(obj);
 	}
-	public void visitDeprecated(Deprecated obj){
+	public void visitDeprecated(org.apache.bcel.classfile.Deprecated obj){
 		tostring = toString(obj);
 	}
 	public void visitExceptionTable(ExceptionTable obj){
