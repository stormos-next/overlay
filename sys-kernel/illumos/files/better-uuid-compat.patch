diff --git a/usr/src/head/uuid/uuid.h b/usr/src/head/uuid/uuid.h
index 570a2c0..659b486 100644
--- a/usr/src/head/uuid/uuid.h
+++ b/usr/src/head/uuid/uuid.h
@@ -22,13 +22,12 @@
 /*
  * Copyright 2005 Sun Microsystems, Inc.  All rights reserved.
  * Use is subject to license terms.
+ * Copyright (c) 2013 Andrew Stormont.  All rights reserved.
  */
 
 #ifndef	_UUID_H
 #define	_UUID_H
 
-#pragma ident	"%Z%%M%	%I%	%E% SMI"
-
 #ifdef	__cplusplus
 extern "C" {
 #endif
@@ -65,6 +64,8 @@ extern void uuid_generate_time(uuid_t);
 extern void uuid_copy(uuid_t, uuid_t);
 extern void uuid_clear(uuid_t);
 extern void uuid_unparse(uuid_t, char *);
+extern void uuid_unparse_lower(uuid_t, char *);
+extern void uuid_unparse_upper(uuid_t, char *);
 extern int uuid_compare(uuid_t, uuid_t);
 extern int uuid_is_null(uuid_t);
 extern int uuid_parse(char *, uuid_t);
diff --git a/usr/src/lib/libuuid/common/mapfile-vers b/usr/src/lib/libuuid/common/mapfile-vers
index 6cea799..71f3a9a 100644
--- a/usr/src/lib/libuuid/common/mapfile-vers
+++ b/usr/src/lib/libuuid/common/mapfile-vers
@@ -20,6 +20,7 @@
 #
 #
 # Copyright (c) 2006, 2010, Oracle and/or its affiliates. All rights reserved.
+# Copyright (c) 2013 Andrew Stormont.  All rights reserved.
 #
 
 #
@@ -38,6 +39,12 @@
 
 $mapfile_version 2
 
+SYMBOL_VERSION STORMOS_0.1 {
+    global:
+	uuid_unparse_lower;
+	uuid_unparse_upper;
+};
+
 SYMBOL_VERSION SUNW_1.1 {
     global:
 	uuid_clear;
diff --git a/usr/src/lib/libuuid/common/uuid.c b/usr/src/lib/libuuid/common/uuid.c
index 92770e0..2d33544 100644
--- a/usr/src/lib/libuuid/common/uuid.c
+++ b/usr/src/lib/libuuid/common/uuid.c
@@ -523,12 +523,12 @@ uuid_clear(uuid_t uu)
 }
 
 /*
- * This function converts the supplied UUID uu from the internal
+ * These functions converts the supplied UUID uu from the internal
  * binary format into a 36-byte string (plus trailing null char)
  * and stores this value in the character string pointed to by out.
  */
 void
-uuid_unparse(uuid_t uu, char *out)
+uuid_unparse_lower(uuid_t uu, char *out)
 {
 	struct uuid 	uuid;
 	uint16_t	clock_seq;
@@ -540,12 +540,6 @@ uuid_unparse(uuid_t uu, char *out)
 		return;
 	}
 
-	/* XXX user should have allocated enough memory */
-	/*
-	 * if (strlen(out) < UUID_PRINTABLE_STRING_LENGTH) {
-	 * return;
-	 * }
-	 */
 	string_to_struct(&uuid, uu);
 	clock_seq = uuid.clock_seq_hi_and_reserved;
 	clock_seq = (clock_seq  << 8) | uuid.clock_seq_low;
@@ -560,6 +554,39 @@ uuid_unparse(uuid_t uu, char *out)
 	(void) strlcat(out, etheraddr, UUID_PRINTABLE_STRING_LENGTH);
 }
 
+void
+uuid_unparse_upper(uuid_t uu, char *out)
+{
+	struct uuid 	uuid;
+	uint16_t	clock_seq;
+	char		etheraddr[13];
+	int		index = 0, i;
+
+	/* basic sanity checking */
+	if (uu == NULL) {
+		return;
+	}
+
+	string_to_struct(&uuid, uu);
+	clock_seq = uuid.clock_seq_hi_and_reserved;
+	clock_seq = (clock_seq  << 8) | uuid.clock_seq_low;
+	for (i = 0; i < 6; i++) {
+		(void) sprintf(&etheraddr[index++], "%.2X", uuid.node_addr[i]);
+		index++;
+	}
+	etheraddr[index] = '\0';
+
+	(void) snprintf(out, 25, "%08X-%04X-%04X-%04X-",
+	    uuid.time_low, uuid.time_mid, uuid.time_hi_and_version, clock_seq);
+	(void) strlcat(out, etheraddr, UUID_PRINTABLE_STRING_LENGTH);
+}
+
+/*
+ * Historically solaris defaults to running lower case, so for the sake
+ * of compatibility we do too.
+ */
+void uuid_unparse(uuid_t, char*) __attribute__((alias("uuid_unparse_lower")));
+
 /*
  * The uuid_is_null function compares the value of the supplied
  * UUID variable uu to the NULL value. If the value is equal
